/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-ionic-image-viewer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { ModalController } from '@ionic/angular';
import { ViewerModalComponent } from './viewer-modal/viewer-modal.component';
export class NgxIonicImageViewerDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} modalController
     */
    constructor(el, renderer, modalController) {
        this.el = el;
        this.renderer = renderer;
        this.modalController = modalController;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.viewImage(this.src, this.srcFallback, this.srcHighRes, this.title, this.text, this.scheme, this.slideOptions, this.swipeToClose);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        if (this.src !== this.el.nativeElement.src) {
            this.src = this.el.nativeElement.src;
        }
        if (this.srcFallback) {
            this.renderer.setAttribute(this.el.nativeElement, 'src', this.srcFallback);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.el.nativeElement.hasAttribute('src')) {
            this.renderer.setAttribute(this.el.nativeElement, 'src', this.src);
        }
    }
    /**
     * @param {?} src
     * @param {?=} srcFallback
     * @param {?=} srcHighRes
     * @param {?=} title
     * @param {?=} text
     * @param {?=} scheme
     * @param {?=} slideOptions
     * @param {?=} swipeToClose
     * @return {?}
     */
    viewImage(src, srcFallback = '', srcHighRes = '', title = '', text = '', scheme = 'auto', slideOptions = {}, swipeToClose = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const modal = yield this.modalController.create({
                component: ViewerModalComponent,
                componentProps: {
                    src,
                    srcFallback,
                    srcHighRes,
                    title,
                    text,
                    scheme,
                    slideOptions,
                    swipeToClose
                },
                cssClass: 'modal-fullscreen',
                keyboardClose: true,
                showBackdrop: true
            });
            return yield modal.present();
        });
    }
}
NgxIonicImageViewerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ionImgViewer]'
            },] }
];
/** @nocollapse */
NgxIonicImageViewerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ModalController }
];
NgxIonicImageViewerDirective.propDecorators = {
    scheme: [{ type: Input }],
    slideOptions: [{ type: Input }],
    src: [{ type: Input }],
    srcFallback: [{ type: Input }],
    srcHighRes: [{ type: Input }],
    swipeToClose: [{ type: Input }],
    text: [{ type: Input }],
    title: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onError: [{ type: HostListener, args: ['error', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.scheme;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.slideOptions;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.src;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.srcFallback;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.srcHighRes;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.swipeToClose;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.text;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.title;
    /**
     * @type {?}
     * @private
     */
    NgxIonicImageViewerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxIonicImageViewerDirective.prototype.renderer;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.modalController;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWlvbmljLWltYWdlLXZpZXdlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW9uaWMtaW1hZ2Utdmlld2VyLyIsInNvdXJjZXMiOlsibGliL25neC1pb25pYy1pbWFnZS12aWV3ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUs3RSxNQUFNLE9BQU8sNEJBQTRCOzs7Ozs7SUFDdkMsWUFBb0IsRUFBYyxFQUFVLFFBQW1CLEVBQVMsZUFBZ0M7UUFBcEYsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBUyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDOzs7O0lBV3JGLE9BQU87UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4SSxDQUFDOzs7OztJQUVrQyxPQUFPLENBQUMsS0FBSztRQUM5QyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFO1lBQzFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDNUU7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwRTtJQUNILENBQUM7Ozs7Ozs7Ozs7OztJQUVLLFNBQVMsQ0FDYixHQUFXLEVBQ1gsY0FBc0IsRUFBRSxFQUN4QixhQUFxQixFQUFFLEVBQ3ZCLFFBQWdCLEVBQUUsRUFDbEIsT0FBZSxFQUFFLEVBQ2pCLFNBQWlCLE1BQU0sRUFDdkIsZUFBdUIsRUFBRSxFQUN6QixlQUF3QixJQUFJOzs7a0JBRXRCLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO2dCQUM5QyxTQUFTLEVBQUUsb0JBQW9CO2dCQUMvQixjQUFjLEVBQUU7b0JBQ2QsR0FBRztvQkFDSCxXQUFXO29CQUNYLFVBQVU7b0JBQ1YsS0FBSztvQkFDTCxJQUFJO29CQUNKLE1BQU07b0JBQ04sWUFBWTtvQkFDWixZQUFZO2lCQUNiO2dCQUNELFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLGFBQWEsRUFBRSxJQUFJO2dCQUNuQixZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFDO1lBRUYsT0FBTyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixDQUFDO0tBQUE7OztZQTlERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7OztZQU5tQixVQUFVO1lBQXVCLFNBQVM7WUFDckQsZUFBZTs7O3FCQVNyQixLQUFLOzJCQUNMLEtBQUs7a0JBQ0wsS0FBSzswQkFDTCxLQUFLO3lCQUNMLEtBQUs7MkJBQ0wsS0FBSzttQkFDTCxLQUFLO29CQUNMLEtBQUs7c0JBRUwsWUFBWSxTQUFDLE9BQU87c0JBSXBCLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFiakMsOENBQXlCOztJQUN6QixvREFBK0I7O0lBQy9CLDJDQUFxQjs7SUFDckIsbURBQThCOztJQUM5QixrREFBNkI7O0lBQzdCLG9EQUFnQzs7SUFDaEMsNENBQXVCOztJQUN2Qiw2Q0FBd0I7Ozs7O0lBVFosMENBQXNCOzs7OztJQUFFLGdEQUEyQjs7SUFBRSx1REFBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIFJlbmRlcmVyMiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNb2RhbENvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQgeyBWaWV3ZXJNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vdmlld2VyLW1vZGFsL3ZpZXdlci1tb2RhbC5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9uSW1nVmlld2VyXSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4SW9uaWNJbWFnZVZpZXdlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHVibGljIG1vZGFsQ29udHJvbGxlcjogTW9kYWxDb250cm9sbGVyKSB7fVxuXG4gIEBJbnB1dCgpIHNjaGVtZT86IHN0cmluZztcbiAgQElucHV0KCkgc2xpZGVPcHRpb25zPzogb2JqZWN0O1xuICBASW5wdXQoKSBzcmM6IHN0cmluZztcbiAgQElucHV0KCkgc3JjRmFsbGJhY2s/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNyY0hpZ2hSZXM/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN3aXBlVG9DbG9zZT86IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRleHQ/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHRpdGxlPzogc3RyaW5nO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgb25DbGljaygpIHtcbiAgICB0aGlzLnZpZXdJbWFnZSh0aGlzLnNyYywgdGhpcy5zcmNGYWxsYmFjaywgdGhpcy5zcmNIaWdoUmVzLCB0aGlzLnRpdGxlLCB0aGlzLnRleHQsIHRoaXMuc2NoZW1lLCB0aGlzLnNsaWRlT3B0aW9ucywgdGhpcy5zd2lwZVRvQ2xvc2UpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZXJyb3InLCBbJyRldmVudCddKSBvbkVycm9yKGVycm9yKSB7XG4gICAgaWYgKHRoaXMuc3JjICE9PSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3JjKSB7XG4gICAgICB0aGlzLnNyYyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5zcmM7XG4gICAgfVxuICAgIGlmICh0aGlzLnNyY0ZhbGxiYWNrKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzcmMnLCB0aGlzLnNyY0ZhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuZWwubmF0aXZlRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3NyYycpKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzcmMnLCB0aGlzLnNyYyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdmlld0ltYWdlKFxuICAgIHNyYzogc3RyaW5nLFxuICAgIHNyY0ZhbGxiYWNrOiBzdHJpbmcgPSAnJyxcbiAgICBzcmNIaWdoUmVzOiBzdHJpbmcgPSAnJyxcbiAgICB0aXRsZTogc3RyaW5nID0gJycsXG4gICAgdGV4dDogc3RyaW5nID0gJycsXG4gICAgc2NoZW1lOiBzdHJpbmcgPSAnYXV0bycsXG4gICAgc2xpZGVPcHRpb25zOiBvYmplY3QgPSB7fSxcbiAgICBzd2lwZVRvQ2xvc2U6IGJvb2xlYW4gPSB0cnVlXG4gICkge1xuICAgIGNvbnN0IG1vZGFsID0gYXdhaXQgdGhpcy5tb2RhbENvbnRyb2xsZXIuY3JlYXRlKHtcbiAgICAgIGNvbXBvbmVudDogVmlld2VyTW9kYWxDb21wb25lbnQsXG4gICAgICBjb21wb25lbnRQcm9wczoge1xuICAgICAgICBzcmMsXG4gICAgICAgIHNyY0ZhbGxiYWNrLFxuICAgICAgICBzcmNIaWdoUmVzLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgc2NoZW1lLFxuICAgICAgICBzbGlkZU9wdGlvbnMsXG4gICAgICAgIHN3aXBlVG9DbG9zZVxuICAgICAgfSxcbiAgICAgIGNzc0NsYXNzOiAnbW9kYWwtZnVsbHNjcmVlbicsXG4gICAgICBrZXlib2FyZENsb3NlOiB0cnVlLFxuICAgICAgc2hvd0JhY2tkcm9wOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbW9kYWwucHJlc2VudCgpO1xuICB9XG59XG4iXX0=