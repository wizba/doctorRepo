/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-ionic-image-viewer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { ModalController } from '@ionic/angular';
import { ViewerModalComponent } from './viewer-modal/viewer-modal.component';
var NgxIonicImageViewerDirective = /** @class */ (function () {
    function NgxIonicImageViewerDirective(el, renderer, modalController) {
        this.el = el;
        this.renderer = renderer;
        this.modalController = modalController;
    }
    /**
     * @return {?}
     */
    NgxIonicImageViewerDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.viewImage(this.src, this.srcFallback, this.srcHighRes, this.title, this.text, this.scheme, this.slideOptions, this.swipeToClose);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgxIonicImageViewerDirective.prototype.onError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (this.src !== this.el.nativeElement.src) {
            this.src = this.el.nativeElement.src;
        }
        if (this.srcFallback) {
            this.renderer.setAttribute(this.el.nativeElement, 'src', this.srcFallback);
        }
    };
    /**
     * @return {?}
     */
    NgxIonicImageViewerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.el.nativeElement.hasAttribute('src')) {
            this.renderer.setAttribute(this.el.nativeElement, 'src', this.src);
        }
    };
    /**
     * @param {?} src
     * @param {?=} srcFallback
     * @param {?=} srcHighRes
     * @param {?=} title
     * @param {?=} text
     * @param {?=} scheme
     * @param {?=} slideOptions
     * @param {?=} swipeToClose
     * @return {?}
     */
    NgxIonicImageViewerDirective.prototype.viewImage = /**
     * @param {?} src
     * @param {?=} srcFallback
     * @param {?=} srcHighRes
     * @param {?=} title
     * @param {?=} text
     * @param {?=} scheme
     * @param {?=} slideOptions
     * @param {?=} swipeToClose
     * @return {?}
     */
    function (src, srcFallback, srcHighRes, title, text, scheme, slideOptions, swipeToClose) {
        if (srcFallback === void 0) { srcFallback = ''; }
        if (srcHighRes === void 0) { srcHighRes = ''; }
        if (title === void 0) { title = ''; }
        if (text === void 0) { text = ''; }
        if (scheme === void 0) { scheme = 'auto'; }
        if (slideOptions === void 0) { slideOptions = {}; }
        if (swipeToClose === void 0) { swipeToClose = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modal;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modalController.create({
                            component: ViewerModalComponent,
                            componentProps: {
                                src: src,
                                srcFallback: srcFallback,
                                srcHighRes: srcHighRes,
                                title: title,
                                text: text,
                                scheme: scheme,
                                slideOptions: slideOptions,
                                swipeToClose: swipeToClose
                            },
                            cssClass: 'modal-fullscreen',
                            keyboardClose: true,
                            showBackdrop: true
                        })];
                    case 1:
                        modal = _a.sent();
                        return [4 /*yield*/, modal.present()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    NgxIonicImageViewerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ionImgViewer]'
                },] }
    ];
    /** @nocollapse */
    NgxIonicImageViewerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ModalController }
    ]; };
    NgxIonicImageViewerDirective.propDecorators = {
        scheme: [{ type: Input }],
        slideOptions: [{ type: Input }],
        src: [{ type: Input }],
        srcFallback: [{ type: Input }],
        srcHighRes: [{ type: Input }],
        swipeToClose: [{ type: Input }],
        text: [{ type: Input }],
        title: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onError: [{ type: HostListener, args: ['error', ['$event'],] }]
    };
    return NgxIonicImageViewerDirective;
}());
export { NgxIonicImageViewerDirective };
if (false) {
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.scheme;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.slideOptions;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.src;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.srcFallback;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.srcHighRes;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.swipeToClose;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.text;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.title;
    /**
     * @type {?}
     * @private
     */
    NgxIonicImageViewerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxIonicImageViewerDirective.prototype.renderer;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.modalController;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWlvbmljLWltYWdlLXZpZXdlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW9uaWMtaW1hZ2Utdmlld2VyLyIsInNvdXJjZXMiOlsibGliL25neC1pb25pYy1pbWFnZS12aWV3ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUU3RTtJQUlFLHNDQUFvQixFQUFjLEVBQVUsUUFBbUIsRUFBUyxlQUFnQztRQUFwRixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFTLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7Ozs7SUFXckYsOENBQU87OztJQUE5QjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEksQ0FBQzs7Ozs7SUFFa0MsOENBQU87Ozs7SUFBMUMsVUFBMkMsS0FBSztRQUM5QyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFO1lBQzFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDNUU7SUFDSCxDQUFDOzs7O0lBRUQsK0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BFO0lBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7O0lBRUssZ0RBQVM7Ozs7Ozs7Ozs7O0lBQWYsVUFDRSxHQUFXLEVBQ1gsV0FBd0IsRUFDeEIsVUFBdUIsRUFDdkIsS0FBa0IsRUFDbEIsSUFBaUIsRUFDakIsTUFBdUIsRUFDdkIsWUFBeUIsRUFDekIsWUFBNEI7UUFONUIsNEJBQUEsRUFBQSxnQkFBd0I7UUFDeEIsMkJBQUEsRUFBQSxlQUF1QjtRQUN2QixzQkFBQSxFQUFBLFVBQWtCO1FBQ2xCLHFCQUFBLEVBQUEsU0FBaUI7UUFDakIsdUJBQUEsRUFBQSxlQUF1QjtRQUN2Qiw2QkFBQSxFQUFBLGlCQUF5QjtRQUN6Qiw2QkFBQSxFQUFBLG1CQUE0Qjs7Ozs7NEJBRWQscUJBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7NEJBQzlDLFNBQVMsRUFBRSxvQkFBb0I7NEJBQy9CLGNBQWMsRUFBRTtnQ0FDZCxHQUFHLEtBQUE7Z0NBQ0gsV0FBVyxhQUFBO2dDQUNYLFVBQVUsWUFBQTtnQ0FDVixLQUFLLE9BQUE7Z0NBQ0wsSUFBSSxNQUFBO2dDQUNKLE1BQU0sUUFBQTtnQ0FDTixZQUFZLGNBQUE7Z0NBQ1osWUFBWSxjQUFBOzZCQUNiOzRCQUNELFFBQVEsRUFBRSxrQkFBa0I7NEJBQzVCLGFBQWEsRUFBRSxJQUFJOzRCQUNuQixZQUFZLEVBQUUsSUFBSTt5QkFDbkIsQ0FBQyxFQUFBOzt3QkFmSSxLQUFLLEdBQUcsU0FlWjt3QkFFSyxxQkFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUE7NEJBQTVCLHNCQUFPLFNBQXFCLEVBQUM7Ozs7S0FDOUI7O2dCQTlERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtpQkFDM0I7Ozs7Z0JBTm1CLFVBQVU7Z0JBQXVCLFNBQVM7Z0JBQ3JELGVBQWU7Ozt5QkFTckIsS0FBSzsrQkFDTCxLQUFLO3NCQUNMLEtBQUs7OEJBQ0wsS0FBSzs2QkFDTCxLQUFLOytCQUNMLEtBQUs7dUJBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUVMLFlBQVksU0FBQyxPQUFPOzBCQUlwQixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztJQTRDbkMsbUNBQUM7Q0FBQSxBQS9ERCxJQStEQztTQTVEWSw0QkFBNEI7OztJQUd2Qyw4Q0FBeUI7O0lBQ3pCLG9EQUErQjs7SUFDL0IsMkNBQXFCOztJQUNyQixtREFBOEI7O0lBQzlCLGtEQUE2Qjs7SUFDN0Isb0RBQWdDOztJQUNoQyw0Q0FBdUI7O0lBQ3ZCLDZDQUF3Qjs7Ozs7SUFUWiwwQ0FBc0I7Ozs7O0lBQUUsZ0RBQTJCOztJQUFFLHVEQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgUmVuZGVyZXIyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZGFsQ29udHJvbGxlciB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7IFZpZXdlck1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3ZXItbW9kYWwvdmlld2VyLW1vZGFsLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpb25JbWdWaWV3ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hJb25pY0ltYWdlVmlld2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwdWJsaWMgbW9kYWxDb250cm9sbGVyOiBNb2RhbENvbnRyb2xsZXIpIHt9XG5cbiAgQElucHV0KCkgc2NoZW1lPzogc3RyaW5nO1xuICBASW5wdXQoKSBzbGlkZU9wdGlvbnM/OiBvYmplY3Q7XG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nO1xuICBASW5wdXQoKSBzcmNGYWxsYmFjaz86IHN0cmluZztcbiAgQElucHV0KCkgc3JjSGlnaFJlcz86IHN0cmluZztcbiAgQElucHV0KCkgc3dpcGVUb0Nsb3NlPzogYm9vbGVhbjtcbiAgQElucHV0KCkgdGV4dD86IHN0cmluZztcbiAgQElucHV0KCkgdGl0bGU/OiBzdHJpbmc7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBvbkNsaWNrKCkge1xuICAgIHRoaXMudmlld0ltYWdlKHRoaXMuc3JjLCB0aGlzLnNyY0ZhbGxiYWNrLCB0aGlzLnNyY0hpZ2hSZXMsIHRoaXMudGl0bGUsIHRoaXMudGV4dCwgdGhpcy5zY2hlbWUsIHRoaXMuc2xpZGVPcHRpb25zLCB0aGlzLnN3aXBlVG9DbG9zZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdlcnJvcicsIFsnJGV2ZW50J10pIG9uRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5zcmMgIT09IHRoaXMuZWwubmF0aXZlRWxlbWVudC5zcmMpIHtcbiAgICAgIHRoaXMuc3JjID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnNyYztcbiAgICB9XG4gICAgaWYgKHRoaXMuc3JjRmFsbGJhY2spIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NyYycsIHRoaXMuc3JjRmFsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5lbC5uYXRpdmVFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NyYycsIHRoaXMuc3JjKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB2aWV3SW1hZ2UoXG4gICAgc3JjOiBzdHJpbmcsXG4gICAgc3JjRmFsbGJhY2s6IHN0cmluZyA9ICcnLFxuICAgIHNyY0hpZ2hSZXM6IHN0cmluZyA9ICcnLFxuICAgIHRpdGxlOiBzdHJpbmcgPSAnJyxcbiAgICB0ZXh0OiBzdHJpbmcgPSAnJyxcbiAgICBzY2hlbWU6IHN0cmluZyA9ICdhdXRvJyxcbiAgICBzbGlkZU9wdGlvbnM6IG9iamVjdCA9IHt9LFxuICAgIHN3aXBlVG9DbG9zZTogYm9vbGVhbiA9IHRydWVcbiAgKSB7XG4gICAgY29uc3QgbW9kYWwgPSBhd2FpdCB0aGlzLm1vZGFsQ29udHJvbGxlci5jcmVhdGUoe1xuICAgICAgY29tcG9uZW50OiBWaWV3ZXJNb2RhbENvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudFByb3BzOiB7XG4gICAgICAgIHNyYyxcbiAgICAgICAgc3JjRmFsbGJhY2ssXG4gICAgICAgIHNyY0hpZ2hSZXMsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICB0ZXh0LFxuICAgICAgICBzY2hlbWUsXG4gICAgICAgIHNsaWRlT3B0aW9ucyxcbiAgICAgICAgc3dpcGVUb0Nsb3NlXG4gICAgICB9LFxuICAgICAgY3NzQ2xhc3M6ICdtb2RhbC1mdWxsc2NyZWVuJyxcbiAgICAgIGtleWJvYXJkQ2xvc2U6IHRydWUsXG4gICAgICBzaG93QmFja2Ryb3A6IHRydWVcbiAgICB9KTtcblxuICAgIHJldHVybiBhd2FpdCBtb2RhbC5wcmVzZW50KCk7XG4gIH1cbn1cbiJdfQ==