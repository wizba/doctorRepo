/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-ionic-image-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// tslint:disable-next-line
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { ModalController } from '@ionic/angular';
import { ViewerModalComponent } from './viewer-modal/viewer-modal.component';
var NgxIonicImageViewerComponent = /** @class */ (function () {
    function NgxIonicImageViewerComponent(modalController) {
        this.modalController = modalController;
    }
    /**
     * @param {?} src
     * @param {?=} srcFallback
     * @param {?=} srcHighRes
     * @param {?=} title
     * @param {?=} text
     * @param {?=} scheme
     * @param {?=} slideOptions
     * @param {?=} swipeToClose
     * @return {?}
     */
    NgxIonicImageViewerComponent.prototype.viewImage = /**
     * @param {?} src
     * @param {?=} srcFallback
     * @param {?=} srcHighRes
     * @param {?=} title
     * @param {?=} text
     * @param {?=} scheme
     * @param {?=} slideOptions
     * @param {?=} swipeToClose
     * @return {?}
     */
    function (src, srcFallback, srcHighRes, title, text, scheme, slideOptions, swipeToClose) {
        if (srcFallback === void 0) { srcFallback = ''; }
        if (srcHighRes === void 0) { srcHighRes = ''; }
        if (title === void 0) { title = ''; }
        if (text === void 0) { text = ''; }
        if (scheme === void 0) { scheme = 'auto'; }
        if (slideOptions === void 0) { slideOptions = {}; }
        if (swipeToClose === void 0) { swipeToClose = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modal;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modalController.create({
                            component: ViewerModalComponent,
                            componentProps: {
                                src: src,
                                srcFallback: srcFallback,
                                srcHighRes: srcHighRes,
                                title: title,
                                text: text,
                                scheme: scheme,
                                slideOptions: slideOptions,
                                swipeToClose: swipeToClose
                            },
                            cssClass: 'modal-fullscreen',
                            keyboardClose: true,
                            showBackdrop: true
                        })];
                    case 1:
                        modal = _a.sent();
                        return [4 /*yield*/, modal.present()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    NgxIonicImageViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    NgxIonicImageViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ion-img-viewer',
                    template: "<img\n  [alt]=\"alt\"\n  [src]=\"src\"\n  (click)=\"viewImage(src, srcFallback, srcHighRes, title, text, scheme, slideOptions, swipeToClose)\"\n  (error)=\"src = srcFallback\"\n/>\n",
                    encapsulation: ViewEncapsulation.Emulated,
                    styles: ["\n      :host {\n        display: block;\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    NgxIonicImageViewerComponent.ctorParameters = function () { return [
        { type: ModalController }
    ]; };
    NgxIonicImageViewerComponent.propDecorators = {
        alt: [{ type: Input }],
        scheme: [{ type: Input }],
        slideOptions: [{ type: Input }],
        src: [{ type: Input }],
        srcFallback: [{ type: Input }],
        srcHighRes: [{ type: Input }],
        swipeToClose: [{ type: Input }],
        text: [{ type: Input }],
        title: [{ type: Input }]
    };
    return NgxIonicImageViewerComponent;
}());
export { NgxIonicImageViewerComponent };
if (false) {
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.alt;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.scheme;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.slideOptions;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.src;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.srcFallback;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.srcHighRes;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.swipeToClose;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.text;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.title;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.modalController;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWlvbmljLWltYWdlLXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW9uaWMtaW1hZ2Utdmlld2VyLyIsInNvdXJjZXMiOlsibGliL25neC1pb25pYy1pbWFnZS12aWV3ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFN0U7SUF1QkUsc0NBQW1CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7Ozs7Ozs7Ozs7OztJQUVqRCxnREFBUzs7Ozs7Ozs7Ozs7SUFBZixVQUNFLEdBQVcsRUFDWCxXQUF3QixFQUN4QixVQUF1QixFQUN2QixLQUFrQixFQUNsQixJQUFpQixFQUNqQixNQUF1QixFQUN2QixZQUF5QixFQUN6QixZQUE0QjtRQU41Qiw0QkFBQSxFQUFBLGdCQUF3QjtRQUN4QiwyQkFBQSxFQUFBLGVBQXVCO1FBQ3ZCLHNCQUFBLEVBQUEsVUFBa0I7UUFDbEIscUJBQUEsRUFBQSxTQUFpQjtRQUNqQix1QkFBQSxFQUFBLGVBQXVCO1FBQ3ZCLDZCQUFBLEVBQUEsaUJBQXlCO1FBQ3pCLDZCQUFBLEVBQUEsbUJBQTRCOzs7Ozs0QkFFZCxxQkFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQzs0QkFDOUMsU0FBUyxFQUFFLG9CQUFvQjs0QkFDL0IsY0FBYyxFQUFFO2dDQUNkLEdBQUcsS0FBQTtnQ0FDSCxXQUFXLGFBQUE7Z0NBQ1gsVUFBVSxZQUFBO2dDQUNWLEtBQUssT0FBQTtnQ0FDTCxJQUFJLE1BQUE7Z0NBQ0osTUFBTSxRQUFBO2dDQUNOLFlBQVksY0FBQTtnQ0FDWixZQUFZLGNBQUE7NkJBQ2I7NEJBQ0QsUUFBUSxFQUFFLGtCQUFrQjs0QkFDNUIsYUFBYSxFQUFFLElBQUk7NEJBQ25CLFlBQVksRUFBRSxJQUFJO3lCQUNuQixDQUFDLEVBQUE7O3dCQWZJLEtBQUssR0FBRyxTQWVaO3dCQUVLLHFCQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBQTs0QkFBNUIsc0JBQU8sU0FBcUIsRUFBQzs7OztLQUM5Qjs7OztJQUVELCtDQUFROzs7SUFBUixjQUFZLENBQUM7O2dCQXZEZCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsaU1BQXNEO29CQVF0RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsUUFBUTs2QkFOdkMseURBSUM7aUJBR0o7Ozs7Z0JBZFEsZUFBZTs7O3NCQWdCckIsS0FBSzt5QkFDTCxLQUFLOytCQUNMLEtBQUs7c0JBQ0wsS0FBSzs4QkFDTCxLQUFLOzZCQUNMLEtBQUs7K0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3dCQUNMLEtBQUs7O0lBbUNSLG1DQUFDO0NBQUEsQUF4REQsSUF3REM7U0E1Q1ksNEJBQTRCOzs7SUFDdkMsMkNBQXNCOztJQUN0Qiw4Q0FBeUI7O0lBQ3pCLG9EQUErQjs7SUFDL0IsMkNBQXFCOztJQUNyQixtREFBOEI7O0lBQzlCLGtEQUE2Qjs7SUFDN0Isb0RBQWdDOztJQUNoQyw0Q0FBdUI7O0lBQ3ZCLDZDQUF3Qjs7SUFFWix1REFBdUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kYWxDb250cm9sbGVyIH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xuaW1wb3J0IHsgVmlld2VyTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3ZpZXdlci1tb2RhbC92aWV3ZXItbW9kYWwuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaW9uLWltZy12aWV3ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LWlvbmljLWltYWdlLXZpZXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgYFxuICBdLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hJb25pY0ltYWdlVmlld2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgYWx0Pzogc3RyaW5nO1xuICBASW5wdXQoKSBzY2hlbWU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNsaWRlT3B0aW9ucz86IG9iamVjdDtcbiAgQElucHV0KCkgc3JjOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNyY0ZhbGxiYWNrPzogc3RyaW5nO1xuICBASW5wdXQoKSBzcmNIaWdoUmVzPzogc3RyaW5nO1xuICBASW5wdXQoKSBzd2lwZVRvQ2xvc2U/OiBib29sZWFuO1xuICBASW5wdXQoKSB0ZXh0Pzogc3RyaW5nO1xuICBASW5wdXQoKSB0aXRsZT86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbW9kYWxDb250cm9sbGVyOiBNb2RhbENvbnRyb2xsZXIpIHt9XG5cbiAgYXN5bmMgdmlld0ltYWdlKFxuICAgIHNyYzogc3RyaW5nLFxuICAgIHNyY0ZhbGxiYWNrOiBzdHJpbmcgPSAnJyxcbiAgICBzcmNIaWdoUmVzOiBzdHJpbmcgPSAnJyxcbiAgICB0aXRsZTogc3RyaW5nID0gJycsXG4gICAgdGV4dDogc3RyaW5nID0gJycsXG4gICAgc2NoZW1lOiBzdHJpbmcgPSAnYXV0bycsXG4gICAgc2xpZGVPcHRpb25zOiBvYmplY3QgPSB7fSxcbiAgICBzd2lwZVRvQ2xvc2U6IGJvb2xlYW4gPSB0cnVlXG4gICkge1xuICAgIGNvbnN0IG1vZGFsID0gYXdhaXQgdGhpcy5tb2RhbENvbnRyb2xsZXIuY3JlYXRlKHtcbiAgICAgIGNvbXBvbmVudDogVmlld2VyTW9kYWxDb21wb25lbnQsXG4gICAgICBjb21wb25lbnRQcm9wczoge1xuICAgICAgICBzcmMsXG4gICAgICAgIHNyY0ZhbGxiYWNrLFxuICAgICAgICBzcmNIaWdoUmVzLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgc2NoZW1lLFxuICAgICAgICBzbGlkZU9wdGlvbnMsXG4gICAgICAgIHN3aXBlVG9DbG9zZVxuICAgICAgfSxcbiAgICAgIGNzc0NsYXNzOiAnbW9kYWwtZnVsbHNjcmVlbicsXG4gICAgICBrZXlib2FyZENsb3NlOiB0cnVlLFxuICAgICAgc2hvd0JhY2tkcm9wOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbW9kYWwucHJlc2VudCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7fVxufVxuIl19